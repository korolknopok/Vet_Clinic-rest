{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"dereferenceSync\", {\n  enumerable: true,\n  get: function () {\n    return dereferenceSync;\n  }\n});\nvar _klona = require(\"./klona\");\nvar _resolveRef = require(\"./resolveRef\");\nvar cache = new Map();\nvar dereferenceSync = function (schema) {\n  if (cache.has(schema)) {\n    return cache.get(schema);\n  }\n  var visitedNodes = new Set();\n  var cloned = (0, _klona.klona)(schema);\n  var resolve = function (current, path) {\n    if (typeof current === \"object\" && current !== null) {\n      // make sure we don't visit the same node twice\n      if (visitedNodes.has(current)) {\n        return current;\n      }\n      visitedNodes.add(current);\n      if (Array.isArray(current)) {\n        // array\n        for (var index = 0; index < current.length; index++) {\n          current[index] = resolve(current[index], \"\".concat(path, \"/\").concat(index));\n        }\n      } else {\n        // object\n        if (\"$ref\" in current && typeof current[\"$ref\"] === \"string\") {\n          return (0, _resolveRef.resolveRefSync)(cloned, current[\"$ref\"]);\n        }\n        for (var key in current) {\n          current[key] = resolve(current[key], \"\".concat(path, \"/\").concat(key));\n        }\n      }\n    }\n    return current;\n  };\n  var result = resolve(cloned, \"#\");\n  cache.set(schema, result);\n  return result;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","dereferenceSync","_klona","require","_resolveRef","cache","Map","schema","has","visitedNodes","Set","cloned","klona","resolve","current","path","add","Array","isArray","index","length","concat","resolveRefSync","key","result","set"],"sources":["C:/Users/Artem Nazmutdinov/vet_clinic_front/node_modules/dereference-json-schema/dereference.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"dereferenceSync\", {\n    enumerable: true,\n    get: function() {\n        return dereferenceSync;\n    }\n});\nvar _klona = require(\"./klona\");\nvar _resolveRef = require(\"./resolveRef\");\nvar cache = new Map();\nvar dereferenceSync = function(schema) {\n    if (cache.has(schema)) {\n        return cache.get(schema);\n    }\n    var visitedNodes = new Set();\n    var cloned = (0, _klona.klona)(schema);\n    var resolve = function(current, path) {\n        if (typeof current === \"object\" && current !== null) {\n            // make sure we don't visit the same node twice\n            if (visitedNodes.has(current)) {\n                return current;\n            }\n            visitedNodes.add(current);\n            if (Array.isArray(current)) {\n                // array\n                for(var index = 0; index < current.length; index++){\n                    current[index] = resolve(current[index], \"\".concat(path, \"/\").concat(index));\n                }\n            } else {\n                // object\n                if (\"$ref\" in current && typeof current[\"$ref\"] === \"string\") {\n                    return (0, _resolveRef.resolveRefSync)(cloned, current[\"$ref\"]);\n                }\n                for(var key in current){\n                    current[key] = resolve(current[key], \"\".concat(path, \"/\").concat(key));\n                }\n            }\n        }\n        return current;\n    };\n    var result = resolve(cloned, \"#\");\n    cache.set(schema, result);\n    return result;\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFH,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,iBAAiB,EAAE;EAC9CE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAAAA,CAAA,EAAW;IACZ,OAAOC,eAAe;EAC1B;AACJ,CAAC,CAAC;AACF,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC/B,IAAIC,WAAW,GAAGD,OAAO,CAAC,cAAc,CAAC;AACzC,IAAIE,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;AACrB,IAAIL,eAAe,GAAG,SAAAA,CAASM,MAAM,EAAE;EACnC,IAAIF,KAAK,CAACG,GAAG,CAACD,MAAM,CAAC,EAAE;IACnB,OAAOF,KAAK,CAACL,GAAG,CAACO,MAAM,CAAC;EAC5B;EACA,IAAIE,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC5B,IAAIC,MAAM,GAAG,CAAC,CAAC,EAAET,MAAM,CAACU,KAAK,EAAEL,MAAM,CAAC;EACtC,IAAIM,OAAO,GAAG,SAAAA,CAASC,OAAO,EAAEC,IAAI,EAAE;IAClC,IAAI,OAAOD,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAAE;MACjD;MACA,IAAIL,YAAY,CAACD,GAAG,CAACM,OAAO,CAAC,EAAE;QAC3B,OAAOA,OAAO;MAClB;MACAL,YAAY,CAACO,GAAG,CAACF,OAAO,CAAC;MACzB,IAAIG,KAAK,CAACC,OAAO,CAACJ,OAAO,CAAC,EAAE;QACxB;QACA,KAAI,IAAIK,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGL,OAAO,CAACM,MAAM,EAAED,KAAK,EAAE,EAAC;UAC/CL,OAAO,CAACK,KAAK,CAAC,GAAGN,OAAO,CAACC,OAAO,CAACK,KAAK,CAAC,EAAE,EAAE,CAACE,MAAM,CAACN,IAAI,EAAE,GAAG,CAAC,CAACM,MAAM,CAACF,KAAK,CAAC,CAAC;QAChF;MACJ,CAAC,MAAM;QACH;QACA,IAAI,MAAM,IAAIL,OAAO,IAAI,OAAOA,OAAO,CAAC,MAAM,CAAC,KAAK,QAAQ,EAAE;UAC1D,OAAO,CAAC,CAAC,EAAEV,WAAW,CAACkB,cAAc,EAAEX,MAAM,EAAEG,OAAO,CAAC,MAAM,CAAC,CAAC;QACnE;QACA,KAAI,IAAIS,GAAG,IAAIT,OAAO,EAAC;UACnBA,OAAO,CAACS,GAAG,CAAC,GAAGV,OAAO,CAACC,OAAO,CAACS,GAAG,CAAC,EAAE,EAAE,CAACF,MAAM,CAACN,IAAI,EAAE,GAAG,CAAC,CAACM,MAAM,CAACE,GAAG,CAAC,CAAC;QAC1E;MACJ;IACJ;IACA,OAAOT,OAAO;EAClB,CAAC;EACD,IAAIU,MAAM,GAAGX,OAAO,CAACF,MAAM,EAAE,GAAG,CAAC;EACjCN,KAAK,CAACoB,GAAG,CAAClB,MAAM,EAAEiB,MAAM,CAAC;EACzB,OAAOA,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}