{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\n/**\n * Vet_Clinic-rest\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common.ts';\n// @ts-ignore\nimport { BASE_PATH, BaseAPI, operationServerMap } from './base';\n\n/**\n * \n * @export\n * @interface Client\n */\n\n/**\n * \n * @export\n * @interface Veterinarians\n */\n\n/**\n * ClientApi - axios parameter creator\n * @export\n */\nexport const ClientApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiClientGet: async (options = {}) => {\n      const localVarPath = `/api/Client`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n    /**\n     * \n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiClientIdDelete: async (id, options = {}) => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiClientIdDelete', 'id', id);\n      const localVarPath = `/api/Client/{id}`.replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n    /**\n     * \n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiClientIdGet: async (id, options = {}) => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiClientIdGet', 'id', id);\n      const localVarPath = `/api/Client/{id}`.replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n    /**\n     * \n     * @param {Client} [client] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiClientPost: async (client, options = {}) => {\n      const localVarPath = `/api/Client`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(client, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n\n/**\n * ClientApi - functional programming interface\n * @export\n */\n_c = ClientApiAxiosParamCreator;\nexport const ClientApiFp = function (configuration) {\n  const localVarAxiosParamCreator = ClientApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiClientGet(options) {\n      var _configuration$server, _operationServerMap$C, _operationServerMap$C2;\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientGet(options);\n      const index = (_configuration$server = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _configuration$server !== void 0 ? _configuration$server : 0;\n      const operationBasePath = (_operationServerMap$C = operationServerMap['ClientApi.apiClientGet']) === null || _operationServerMap$C === void 0 ? void 0 : (_operationServerMap$C2 = _operationServerMap$C[index]) === null || _operationServerMap$C2 === void 0 ? void 0 : _operationServerMap$C2.url;\n      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n    },\n    /**\n     * \n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiClientIdDelete(id, options) {\n      var _configuration$server2, _operationServerMap$C3, _operationServerMap$C4;\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdDelete(id, options);\n      const index = (_configuration$server2 = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _configuration$server2 !== void 0 ? _configuration$server2 : 0;\n      const operationBasePath = (_operationServerMap$C3 = operationServerMap['ClientApi.apiClientIdDelete']) === null || _operationServerMap$C3 === void 0 ? void 0 : (_operationServerMap$C4 = _operationServerMap$C3[index]) === null || _operationServerMap$C4 === void 0 ? void 0 : _operationServerMap$C4.url;\n      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n    },\n    /**\n     * \n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiClientIdGet(id, options) {\n      var _configuration$server3, _operationServerMap$C5, _operationServerMap$C6;\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdGet(id, options);\n      const index = (_configuration$server3 = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _configuration$server3 !== void 0 ? _configuration$server3 : 0;\n      const operationBasePath = (_operationServerMap$C5 = operationServerMap['ClientApi.apiClientIdGet']) === null || _operationServerMap$C5 === void 0 ? void 0 : (_operationServerMap$C6 = _operationServerMap$C5[index]) === null || _operationServerMap$C6 === void 0 ? void 0 : _operationServerMap$C6.url;\n      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n    },\n    /**\n     * \n     * @param {Client} [client] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiClientPost(client, options) {\n      var _configuration$server4, _operationServerMap$C7, _operationServerMap$C8;\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientPost(client, options);\n      const index = (_configuration$server4 = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _configuration$server4 !== void 0 ? _configuration$server4 : 0;\n      const operationBasePath = (_operationServerMap$C7 = operationServerMap['ClientApi.apiClientPost']) === null || _operationServerMap$C7 === void 0 ? void 0 : (_operationServerMap$C8 = _operationServerMap$C7[index]) === null || _operationServerMap$C8 === void 0 ? void 0 : _operationServerMap$C8.url;\n      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n    }\n  };\n};\n\n/**\n * ClientApi - factory interface\n * @export\n */\n_c2 = ClientApiFp;\nexport const ClientApiFactory = function (configuration, basePath, axios) {\n  const localVarFp = ClientApiFp(configuration);\n  return {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiClientGet(options) {\n      return localVarFp.apiClientGet(options).then(request => request(axios, basePath));\n    },\n    /**\n     * \n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiClientIdDelete(id, options) {\n      return localVarFp.apiClientIdDelete(id, options).then(request => request(axios, basePath));\n    },\n    /**\n     * \n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiClientIdGet(id, options) {\n      return localVarFp.apiClientIdGet(id, options).then(request => request(axios, basePath));\n    },\n    /**\n     * \n     * @param {Client} [client] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiClientPost(client, options) {\n      return localVarFp.apiClientPost(client, options).then(request => request(axios, basePath));\n    }\n  };\n};\n\n/**\n * ClientApi - object-oriented interface\n * @export\n * @class ClientApi\n * @extends {BaseAPI}\n */\n_c3 = ClientApiFactory;\nexport class ClientApi extends BaseAPI {\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ClientApi\n   */\n  apiClientGet(options) {\n    return ClientApiFp(this.configuration).apiClientGet(options).then(request => request(this.axios, this.basePath));\n  }\n\n  /**\n   * \n   * @param {number} id \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ClientApi\n   */\n  apiClientIdDelete(id, options) {\n    return ClientApiFp(this.configuration).apiClientIdDelete(id, options).then(request => request(this.axios, this.basePath));\n  }\n\n  /**\n   * \n   * @param {number} id \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ClientApi\n   */\n  apiClientIdGet(id, options) {\n    return ClientApiFp(this.configuration).apiClientIdGet(id, options).then(request => request(this.axios, this.basePath));\n  }\n\n  /**\n   * \n   * @param {Client} [client] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof ClientApi\n   */\n  apiClientPost(client, options) {\n    return ClientApiFp(this.configuration).apiClientPost(client, options).then(request => request(this.axios, this.basePath));\n  }\n}\n\n/**\n * VeterinariansApi - axios parameter creator\n * @export\n */\nexport const VeterinariansApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiVeterinariansGet: async (options = {}) => {\n      const localVarPath = `/api/Veterinarians`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n    /**\n     * \n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiVeterinariansIdDelete: async (id, options = {}) => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiVeterinariansIdDelete', 'id', id);\n      const localVarPath = `/api/Veterinarians/{id}`.replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n    /**\n     * \n     * @param {number} id \n     * @param {Veterinarians} [veterinarians] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiVeterinariansIdPut: async (id, veterinarians, options = {}) => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiVeterinariansIdPut', 'id', id);\n      const localVarPath = `/api/Veterinarians/{id}`.replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: 'PUT',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(veterinarians, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n    /**\n     * \n     * @param {Veterinarians} [veterinarians] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiVeterinariansPost: async (veterinarians, options = {}) => {\n      const localVarPath = `/api/Veterinarians`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options\n      };\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers\n      };\n      localVarRequestOptions.data = serializeDataIfNeeded(veterinarians, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n\n/**\n * VeterinariansApi - functional programming interface\n * @export\n */\n_c4 = VeterinariansApiAxiosParamCreator;\nexport const VeterinariansApiFp = function (configuration) {\n  const localVarAxiosParamCreator = VeterinariansApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiVeterinariansGet(options) {\n      var _configuration$server5, _operationServerMap$V, _operationServerMap$V2;\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiVeterinariansGet(options);\n      const index = (_configuration$server5 = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _configuration$server5 !== void 0 ? _configuration$server5 : 0;\n      const operationBasePath = (_operationServerMap$V = operationServerMap['VeterinariansApi.apiVeterinariansGet']) === null || _operationServerMap$V === void 0 ? void 0 : (_operationServerMap$V2 = _operationServerMap$V[index]) === null || _operationServerMap$V2 === void 0 ? void 0 : _operationServerMap$V2.url;\n      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n    },\n    /**\n     * \n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiVeterinariansIdDelete(id, options) {\n      var _configuration$server6, _operationServerMap$V3, _operationServerMap$V4;\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiVeterinariansIdDelete(id, options);\n      const index = (_configuration$server6 = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _configuration$server6 !== void 0 ? _configuration$server6 : 0;\n      const operationBasePath = (_operationServerMap$V3 = operationServerMap['VeterinariansApi.apiVeterinariansIdDelete']) === null || _operationServerMap$V3 === void 0 ? void 0 : (_operationServerMap$V4 = _operationServerMap$V3[index]) === null || _operationServerMap$V4 === void 0 ? void 0 : _operationServerMap$V4.url;\n      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n    },\n    /**\n     * \n     * @param {number} id \n     * @param {Veterinarians} [veterinarians] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiVeterinariansIdPut(id, veterinarians, options) {\n      var _configuration$server7, _operationServerMap$V5, _operationServerMap$V6;\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiVeterinariansIdPut(id, veterinarians, options);\n      const index = (_configuration$server7 = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _configuration$server7 !== void 0 ? _configuration$server7 : 0;\n      const operationBasePath = (_operationServerMap$V5 = operationServerMap['VeterinariansApi.apiVeterinariansIdPut']) === null || _operationServerMap$V5 === void 0 ? void 0 : (_operationServerMap$V6 = _operationServerMap$V5[index]) === null || _operationServerMap$V6 === void 0 ? void 0 : _operationServerMap$V6.url;\n      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n    },\n    /**\n     * \n     * @param {Veterinarians} [veterinarians] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiVeterinariansPost(veterinarians, options) {\n      var _configuration$server8, _operationServerMap$V7, _operationServerMap$V8;\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiVeterinariansPost(veterinarians, options);\n      const index = (_configuration$server8 = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _configuration$server8 !== void 0 ? _configuration$server8 : 0;\n      const operationBasePath = (_operationServerMap$V7 = operationServerMap['VeterinariansApi.apiVeterinariansPost']) === null || _operationServerMap$V7 === void 0 ? void 0 : (_operationServerMap$V8 = _operationServerMap$V7[index]) === null || _operationServerMap$V8 === void 0 ? void 0 : _operationServerMap$V8.url;\n      return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n    }\n  };\n};\n\n/**\n * VeterinariansApi - factory interface\n * @export\n */\n_c5 = VeterinariansApiFp;\nexport const VeterinariansApiFactory = function (configuration, basePath, axios) {\n  const localVarFp = VeterinariansApiFp(configuration);\n  return {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiVeterinariansGet(options) {\n      return localVarFp.apiVeterinariansGet(options).then(request => request(axios, basePath));\n    },\n    /**\n     * \n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiVeterinariansIdDelete(id, options) {\n      return localVarFp.apiVeterinariansIdDelete(id, options).then(request => request(axios, basePath));\n    },\n    /**\n     * \n     * @param {number} id \n     * @param {Veterinarians} [veterinarians] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiVeterinariansIdPut(id, veterinarians, options) {\n      return localVarFp.apiVeterinariansIdPut(id, veterinarians, options).then(request => request(axios, basePath));\n    },\n    /**\n     * \n     * @param {Veterinarians} [veterinarians] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiVeterinariansPost(veterinarians, options) {\n      return localVarFp.apiVeterinariansPost(veterinarians, options).then(request => request(axios, basePath));\n    }\n  };\n};\n\n/**\n * VeterinariansApi - object-oriented interface\n * @export\n * @class VeterinariansApi\n * @extends {BaseAPI}\n */\n_c6 = VeterinariansApiFactory;\nexport class VeterinariansApi extends BaseAPI {\n  /**\n   * \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof VeterinariansApi\n   */\n  apiVeterinariansGet(options) {\n    return VeterinariansApiFp(this.configuration).apiVeterinariansGet(options).then(request => request(this.axios, this.basePath));\n  }\n\n  /**\n   * \n   * @param {number} id \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof VeterinariansApi\n   */\n  apiVeterinariansIdDelete(id, options) {\n    return VeterinariansApiFp(this.configuration).apiVeterinariansIdDelete(id, options).then(request => request(this.axios, this.basePath));\n  }\n\n  /**\n   * \n   * @param {number} id \n   * @param {Veterinarians} [veterinarians] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof VeterinariansApi\n   */\n  apiVeterinariansIdPut(id, veterinarians, options) {\n    return VeterinariansApiFp(this.configuration).apiVeterinariansIdPut(id, veterinarians, options).then(request => request(this.axios, this.basePath));\n  }\n\n  /**\n   * \n   * @param {Veterinarians} [veterinarians] \n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof VeterinariansApi\n   */\n  apiVeterinariansPost(veterinarians, options) {\n    return VeterinariansApiFp(this.configuration).apiVeterinariansPost(veterinarians, options).then(request => request(this.axios, this.basePath));\n  }\n}\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"ClientApiAxiosParamCreator\");\n$RefreshReg$(_c2, \"ClientApiFp\");\n$RefreshReg$(_c3, \"ClientApiFactory\");\n$RefreshReg$(_c4, \"VeterinariansApiAxiosParamCreator\");\n$RefreshReg$(_c5, \"VeterinariansApiFp\");\n$RefreshReg$(_c6, \"VeterinariansApiFactory\");","map":{"version":3,"names":["globalAxios","DUMMY_BASE_URL","assertParamExists","setSearchParams","serializeDataIfNeeded","toPathString","createRequestFunction","BASE_PATH","BaseAPI","operationServerMap","ClientApiAxiosParamCreator","configuration","apiClientGet","options","localVarPath","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","headersFromBaseOptions","headers","url","apiClientIdDelete","id","replace","encodeURIComponent","String","apiClientIdGet","apiClientPost","client","data","_c","ClientApiFp","localVarAxiosParamCreator","_configuration$server","_operationServerMap$C","_operationServerMap$C2","localVarAxiosArgs","index","serverIndex","operationBasePath","axios","basePath","_configuration$server2","_operationServerMap$C3","_operationServerMap$C4","_configuration$server3","_operationServerMap$C5","_operationServerMap$C6","_configuration$server4","_operationServerMap$C7","_operationServerMap$C8","_c2","ClientApiFactory","localVarFp","then","request","_c3","ClientApi","VeterinariansApiAxiosParamCreator","apiVeterinariansGet","apiVeterinariansIdDelete","apiVeterinariansIdPut","veterinarians","apiVeterinariansPost","_c4","VeterinariansApiFp","_configuration$server5","_operationServerMap$V","_operationServerMap$V2","_configuration$server6","_operationServerMap$V3","_operationServerMap$V4","_configuration$server7","_operationServerMap$V5","_operationServerMap$V6","_configuration$server8","_operationServerMap$V7","_operationServerMap$V8","_c5","VeterinariansApiFactory","_c6","VeterinariansApi","$RefreshReg$"],"sources":["C:/Users/Artem Nazmutdinov/source/repos/Vet_Clinic-rest/web/src/json/api.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Vet_Clinic-rest\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration.ts';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common.ts';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';\n\n/**\n * \n * @export\n * @interface Client\n */\nexport interface Client {\n    /**\n     * \n     * @type {number}\n     * @memberof Client\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Client\n     */\n    'name'?: string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof Client\n     */\n    'phoneNumber'?: string | null;\n}\n/**\n * \n * @export\n * @interface Veterinarians\n */\nexport interface Veterinarians {\n    /**\n     * \n     * @type {number}\n     * @memberof Veterinarians\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Veterinarians\n     */\n    'name'?: string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof Veterinarians\n     */\n    'dateOfBirth'?: string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof Veterinarians\n     */\n    'phoneNumber'?: string | null;\n    /**\n     * \n     * @type {string}\n     * @memberof Veterinarians\n     */\n    'education'?: string | null;\n}\n\n/**\n * ClientApi - axios parameter creator\n * @export\n */\nexport const ClientApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/Client`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiClientIdDelete', 'id', id)\n            const localVarPath = `/api/Client/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiClientIdGet', 'id', id)\n            const localVarPath = `/api/Client/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {Client} [client] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientPost: async (client?: Client, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/Client`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(client, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ClientApi - functional programming interface\n * @export\n */\nexport const ClientApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ClientApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiClientGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientGet(options);\n            const index = configuration?.serverIndex ?? 0;\n            const operationBasePath = operationServerMap['ClientApi.apiClientGet']?.[index]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiClientIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdDelete(id, options);\n            const index = configuration?.serverIndex ?? 0;\n            const operationBasePath = operationServerMap['ClientApi.apiClientIdDelete']?.[index]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiClientIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientIdGet(id, options);\n            const index = configuration?.serverIndex ?? 0;\n            const operationBasePath = operationServerMap['ClientApi.apiClientIdGet']?.[index]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n        },\n        /**\n         * \n         * @param {Client} [client] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiClientPost(client?: Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClientPost(client, options);\n            const index = configuration?.serverIndex ?? 0;\n            const operationBasePath = operationServerMap['ClientApi.apiClientPost']?.[index]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n        },\n    }\n};\n\n/**\n * ClientApi - factory interface\n * @export\n */\nexport const ClientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ClientApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientGet(options?: any): AxiosPromise<void> {\n            return localVarFp.apiClientGet(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientIdDelete(id: number, options?: any): AxiosPromise<void> {\n            return localVarFp.apiClientIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientIdGet(id: number, options?: any): AxiosPromise<void> {\n            return localVarFp.apiClientIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {Client} [client] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiClientPost(client?: Client, options?: any): AxiosPromise<void> {\n            return localVarFp.apiClientPost(client, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ClientApi - object-oriented interface\n * @export\n * @class ClientApi\n * @extends {BaseAPI}\n */\nexport class ClientApi extends BaseAPI {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ClientApi\n     */\n    public apiClientGet(options?: AxiosRequestConfig) {\n        return ClientApiFp(this.configuration).apiClientGet(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ClientApi\n     */\n    public apiClientIdDelete(id: number, options?: AxiosRequestConfig) {\n        return ClientApiFp(this.configuration).apiClientIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ClientApi\n     */\n    public apiClientIdGet(id: number, options?: AxiosRequestConfig) {\n        return ClientApiFp(this.configuration).apiClientIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {Client} [client] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ClientApi\n     */\n    public apiClientPost(client?: Client, options?: AxiosRequestConfig) {\n        return ClientApiFp(this.configuration).apiClientPost(client, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n/**\n * VeterinariansApi - axios parameter creator\n * @export\n */\nexport const VeterinariansApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiVeterinariansGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/Veterinarians`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiVeterinariansIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiVeterinariansIdDelete', 'id', id)\n            const localVarPath = `/api/Veterinarians/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {Veterinarians} [veterinarians] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiVeterinariansIdPut: async (id: number, veterinarians?: Veterinarians, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiVeterinariansIdPut', 'id', id)\n            const localVarPath = `/api/Veterinarians/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(veterinarians, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {Veterinarians} [veterinarians] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiVeterinariansPost: async (veterinarians?: Veterinarians, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/Veterinarians`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(veterinarians, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * VeterinariansApi - functional programming interface\n * @export\n */\nexport const VeterinariansApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = VeterinariansApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiVeterinariansGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVeterinariansGet(options);\n            const index = configuration?.serverIndex ?? 0;\n            const operationBasePath = operationServerMap['VeterinariansApi.apiVeterinariansGet']?.[index]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiVeterinariansIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVeterinariansIdDelete(id, options);\n            const index = configuration?.serverIndex ?? 0;\n            const operationBasePath = operationServerMap['VeterinariansApi.apiVeterinariansIdDelete']?.[index]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {Veterinarians} [veterinarians] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiVeterinariansIdPut(id: number, veterinarians?: Veterinarians, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVeterinariansIdPut(id, veterinarians, options);\n            const index = configuration?.serverIndex ?? 0;\n            const operationBasePath = operationServerMap['VeterinariansApi.apiVeterinariansIdPut']?.[index]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n        },\n        /**\n         * \n         * @param {Veterinarians} [veterinarians] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiVeterinariansPost(veterinarians?: Veterinarians, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiVeterinariansPost(veterinarians, options);\n            const index = configuration?.serverIndex ?? 0;\n            const operationBasePath = operationServerMap['VeterinariansApi.apiVeterinariansPost']?.[index]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);\n        },\n    }\n};\n\n/**\n * VeterinariansApi - factory interface\n * @export\n */\nexport const VeterinariansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = VeterinariansApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiVeterinariansGet(options?: any): AxiosPromise<void> {\n            return localVarFp.apiVeterinariansGet(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiVeterinariansIdDelete(id: number, options?: any): AxiosPromise<void> {\n            return localVarFp.apiVeterinariansIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {Veterinarians} [veterinarians] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiVeterinariansIdPut(id: number, veterinarians?: Veterinarians, options?: any): AxiosPromise<void> {\n            return localVarFp.apiVeterinariansIdPut(id, veterinarians, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {Veterinarians} [veterinarians] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiVeterinariansPost(veterinarians?: Veterinarians, options?: any): AxiosPromise<void> {\n            return localVarFp.apiVeterinariansPost(veterinarians, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * VeterinariansApi - object-oriented interface\n * @export\n * @class VeterinariansApi\n * @extends {BaseAPI}\n */\nexport class VeterinariansApi extends BaseAPI {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VeterinariansApi\n     */\n    public apiVeterinariansGet(options?: AxiosRequestConfig) {\n        return VeterinariansApiFp(this.configuration).apiVeterinariansGet(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VeterinariansApi\n     */\n    public apiVeterinariansIdDelete(id: number, options?: AxiosRequestConfig) {\n        return VeterinariansApiFp(this.configuration).apiVeterinariansIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} id \n     * @param {Veterinarians} [veterinarians] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VeterinariansApi\n     */\n    public apiVeterinariansIdPut(id: number, veterinarians?: Veterinarians, options?: AxiosRequestConfig) {\n        return VeterinariansApiFp(this.configuration).apiVeterinariansIdPut(id, veterinarians, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {Veterinarians} [veterinarians] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VeterinariansApi\n     */\n    public apiVeterinariansPost(veterinarians?: Veterinarians, options?: AxiosRequestConfig) {\n        return VeterinariansApiFp(this.configuration).apiVeterinariansPost(veterinarians, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}